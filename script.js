// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_KEY = 'b5f3fc6e8095ecb49056466acb6c59da';
const BASE_URL = 'https://api.openweathermap.org/data/2.5';
const AIR_POLLUTION_URL = 'https://api.openweathermap.org/data/2.5/air_pollution';

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message) {
    console.log('üîî ' + message);
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let map = null;
let userPlacemark = null;
let currentUnits = localStorage.getItem('weatherUnits') || 'celsius';
let currentTheme = localStorage.getItem('weatherTheme') || 'dynamic';
let currentCity = '';
let currentCityData = null;
let favorites = JSON.parse(localStorage.getItem('weatherFavorites')) || [];
const TEMPERATURE_SHIFT = 0;



// ========== –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ==========
let isFirstLoad = true;

class IOSNotifications {
    constructor() {
        this.notificationQueue = [];
        this.isShowing = false;
        this.init();
    }

    init() {
        const container = document.createElement('div');
        container.id = 'ios-notifications-container';
        container.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 0;
            z-index: 10000;
            pointer-events: none;
        `;
        document.body.appendChild(container);
    }

    show(options) {
        return new Promise((resolve) => {
            const notification = {
                id: Date.now().toString(),
                type: options.type || 'info',
                title: options.title || '',
                message: options.message || '',
                duration: options.duration || 3000,
                onClose: resolve
            };

            this.notificationQueue.push(notification);
            this.processQueue();
        });
    }

    processQueue() {
        if (this.isShowing || this.notificationQueue.length === 0) return;
        this.isShowing = true;
        const notification = this.notificationQueue.shift();
        this.createNotificationElement(notification);
    }

    createNotificationElement(notification) {
        const container = document.getElementById('ios-notifications-container');
        const notificationEl = document.createElement('div');
        notificationEl.className = `ios-notification ${notification.type}`;
        notificationEl.id = `notification-${notification.id}`;

        const timeString = new Date().toLocaleTimeString('ru-RU', {
            hour: '2-digit', 
            minute: '2-digit'
        });

        notificationEl.innerHTML = `
            <div class="notification-header">
                <div class="notification-app">
                    <div class="app-icon">W</div>
                    <span>Weather Overcast</span>
                </div>
                <div class="notification-time">${timeString}</div>
            </div>
            <div class="notification-title">${notification.title}</div>
            <div class="notification-message">${notification.message}</div>
        `;

        container.appendChild(notificationEl);

        requestAnimationFrame(() => {
            notificationEl.classList.add('show');
        });

        setTimeout(() => {
            this.hideNotification(notification.id, notification.onClose);
        }, notification.duration);
    }

    hideNotification(id, onClose) {
        const notificationEl = document.getElementById(`notification-${id}`);
        if (!notificationEl) {
            this.isShowing = false;
            this.processQueue();
            if (onClose) onClose();
            return;
        }

        notificationEl.classList.remove('show');
        notificationEl.classList.add('hide');

        setTimeout(() => {
            notificationEl.remove();
            this.isShowing = false;
            this.processQueue();
            if (onClose) onClose();
        }, 500);
    }

    success(title, message, duration = 2000) {
        return this.show({ type: 'success', title, message, duration });
    }

    warning(title, message, duration = 4000) {
        return this.show({ type: 'warning', title, message, duration });
    }

    error(title, message, duration = 5000) {
        return this.show({ type: 'error', title, message, duration });
    }

    info(title, message, duration = 3000) {
        return this.show({ type: 'info', title, message, duration });
    }
}

const iosNotifications = new IOSNotifications();

// –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é showNotification
function showNotification(message, type = 'info') {
    switch(type) {
        case 'error': iosNotifications.error('–û—à–∏–±–∫–∞', message); break;
        case 'warning': iosNotifications.warning('–í–Ω–∏–º–∞–Ω–∏–µ', message); break;
        case 'success': iosNotifications.success('–£—Å–ø–µ—à–Ω–æ', message); break;
        default: iosNotifications.info('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', message);
    }
}


// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
const cityDatabase = [
    { name: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", region: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –∏ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", type: "–≥–æ—Ä–æ–¥" },
    { name: "–ù–æ–≤–æ—Å–µ–ª—å–µ", region: "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", type: "–≥–æ—Ä–æ–¥—Å–∫–æ–π –ø–æ—Å—ë–ª–æ–∫", distance: "20 –∫–º" },
    { name: "–Ø–Ω–∏–Ω–æ-1", region: "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", type: "–≥–æ—Ä–æ–¥—Å–∫–æ–π –ø–æ—Å—ë–ª–æ–∫", distance: "14 –∫–º" },
    { name: "–ü–µ—Å–æ—á–Ω—ã–π", region: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", type: "–ø–æ—Å—ë–ª–æ–∫", distance: "22 –∫–º" },
    { name: "–ü–∞–≤–ª–æ–≤—Å–∫", region: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", type: "–≥–æ—Ä–æ–¥", distance: "29 –∫–º" },
    { name: "–∏–º–µ–Ω–∏ –°–≤–µ—Ä–¥–ª–æ–≤–∞", region: "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", type: "–≥–æ—Ä–æ–¥—Å–∫–æ–π –ø–æ—Å—ë–ª–æ–∫", distance: "24 –∫–º" },
    { name: "–ú–æ—Å–∫–≤–∞", region: "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", type: "–≥–æ—Ä–æ–¥" },
    { name: "–ü–∏—Ç–µ—Ä", region: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", type: "–≥–æ—Ä–æ–¥" },
    { name: "–ü–æ–¥–∫–∞–º–µ–Ω–∫–∞", region: "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", type: "–¥–µ—Ä–µ–≤–Ω—è", distance: "35 –∫–º" },
    { name: "–í—ã–±–æ—Ä–≥", region: "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", type: "–≥–æ—Ä–æ–¥", distance: "130 –∫–º" },
    { name: "–ì–∞—Ç—á–∏–Ω–∞", region: "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", type: "–≥–æ—Ä–æ–¥", distance: "45 –∫–º" },
    { name: "–ö—Ä–æ–Ω—à—Ç–∞–¥—Ç", region: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", type: "–≥–æ—Ä–æ–¥", distance: "30 –∫–º" }
];

// –ü–µ—Ä–µ–≤–æ–¥—ã –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
const weatherTranslations = {
    'clear sky': '–Ø—Å–Ω–æ',
    'few clouds': '–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å',
    'scattered clouds': '–†–∞—Å—Å–µ—è–Ω–Ω—ã–µ –æ–±–ª–∞–∫–∞',
    'broken clouds': '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏',
    'overcast clouds': '–ü–∞—Å–º—É—Ä–Ω–æ',
    'shower rain': '–õ–∏–≤–µ–Ω—å',
    'rain': '–î–æ–∂–¥—å',
    'thunderstorm': '–ì—Ä–æ–∑–∞',
    'snow': '–°–Ω–µ–≥',
    'mist': '–¢—É–º–∞–Ω',
    'light rain': '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å',
    'moderate rain': '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
    'heavy intensity rain': '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å'
};

// ========== –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–†–ï–ú–ï–ù–ò ==========
function formatTime(date) {
    return date.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit',
        hour12: false 
    });
}

function getCorrectLocalTime(utcTimestamp, lat, lon) {
    return new Promise(async (resolve) => {
        try {
            // OpenWeatherMap —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            const localTime = new Date(utcTimestamp * 1000);
            console.log('–í—Ä–µ–º—è –∏–∑ OpenWeatherMap (—É–∂–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ):', localTime);
            resolve(localTime);
            
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
            resolve(new Date());
        }
    });
}

function calculateTimezoneForRussia(longitude) {
    let offset = 3 * 3600; // UTC+3 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return offset;
}

function getLocalTimeFromUTC(utcTimestamp, timezoneOffset) {
    // OpenWeatherMap —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return new Date(utcTimestamp * 1000);
}

function formatHourWithMinutes(date) {
    return date.toLocaleTimeString('ru-RU', { 
        hour: '2-digit', 
        minute: '2-digit',
        hour12: false 
    });
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–ï–ú–ü–ï–†–ê–¢–£–†–û–ô ==========
function convertTemperature(temp, units) {
    const celsius = temp;
    switch(units) {
        case 'fahrenheit':
            return Math.round((celsius * 9/5) + 32);
        case 'kelvin':
            return Math.round(celsius + 273.15);
        case 'celsius':
        default:
            return Math.round(celsius);
    }
}

function applyTemperatureShift(temp) {
    const shiftedTemp = temp + TEMPERATURE_SHIFT;
    return convertTemperature(shiftedTemp, currentUnits);
}

function getTemperatureSymbol(units) {
    switch(units) {
        case 'fahrenheit': return '¬∞F';
        case 'kelvin': return 'K';
        case 'celsius':
        default: return '¬∞C';
    }
}

function updateAllTemperatures() {
    if (userPlacemark) {
        const coords = userPlacemark.geometry.getCoordinates();
        getWeatherByCoords(coords[0], coords[1]);
    } else if (currentCity) {
        getWeatherByCity(currentCity);
    }
}

function addToFavorites(cityData) {
    if (!isCityInFavorites(cityData.name)) {
        const favoriteCity = {
            name: cityData.name,
            country: cityData.sys.country,
            lat: cityData.coord.lat,
            lon: cityData.coord.lon,
            timestamp: Date.now()
        };
        favorites.push(favoriteCity);
        saveFavorites();
        updateFavoriteButton(true);
        iosNotifications.success('–î–æ–±–∞–≤–ª–µ–Ω–æ', `${cityData.name} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º`, 2000);
    }
}

function removeFromFavorites(cityName) {
    favorites = favorites.filter(fav => fav.name !== cityName);
    saveFavorites();
    if (currentCity === cityName) {
        updateFavoriteButton(false);
    }
    iosNotifications.info('–£–¥–∞–ª–µ–Ω–æ', `${cityName} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ`, 2000);
}

function saveFavorites() {
    localStorage.setItem('weatherFavorites', JSON.stringify(favorites));
}

function isCityInFavorites(cityName) {
    return favorites.some(fav => fav.name === cityName);
}

function updateFavoriteButton(isFavorite) {
    const favoriteBtn = document.getElementById('favorite-btn');
    if (!favoriteBtn) return;

    if (isFavorite) {
        favoriteBtn.classList.add('active');
        favoriteBtn.querySelector('svg').style.fill = 'currentColor';
    } else {
        favoriteBtn.classList.remove('active');
        favoriteBtn.querySelector('svg').style.fill = 'none';
    }
}

// ========== –ê–ù–ò–ú–ò–†–û–í–ê–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ö–û–ù ==========

function showFavoritesPanel() {
    const overlay = document.getElementById('favorites-overlay');
    const list = document.getElementById('favorites-list');
    const empty = document.getElementById('favorites-empty');

    if (!overlay || !list || !empty) return;

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    overlay.style.animation = 'none';
    list.innerHTML = '';

    if (favorites.length === 0) {
        empty.style.display = 'block';
        list.style.display = 'none';
    } else {
        empty.style.display = 'none';
        list.style.display = 'block';

        favorites.forEach((city, index) => {
            const item = document.createElement('div');
            item.className = 'favorite-item';
            item.style.animationDelay = `${0.1 + index * 0.05}s`;
            item.innerHTML = `
                <div class="favorite-info" onclick="selectFavoriteCity('${city.name}', ${city.lat}, ${city.lon})">
                    <div class="favorite-city">${city.name}</div>
                    <div class="favorite-region">${city.country}</div>
                </div>
                <button class="remove-favorite" onclick="event.stopPropagation(); removeFromFavorites('${city.name}')">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </button>
            `;
            list.appendChild(item);
        });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    requestAnimationFrame(() => {
        overlay.style.display = 'flex';
        overlay.style.animation = 'fadeInOverlay 0.3s ease-out';
        document.body.classList.add('settings-open');
    });
}

function closeFavoritesPanel() {
    const overlay = document.getElementById('favorites-overlay');
    if (overlay) {
        overlay.style.animation = 'fadeInOverlay 0.3s ease-out reverse';
        setTimeout(() => {
            overlay.style.display = 'none';
            document.body.classList.remove('settings-open');
        }, 250);
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
function showSettingsPanel() {
    const overlay = document.getElementById('settings-overlay');
    if (overlay) {
        overlay.style.animation = 'none';
        requestAnimationFrame(() => {
            overlay.style.display = 'flex';
            overlay.style.animation = 'fadeInOverlay 0.3s ease-out';
            document.body.classList.add('settings-open');
        });
    }
}

function closeSettingsPanel() {
    const overlay = document.getElementById('settings-overlay');
    if (overlay) {
        overlay.style.animation = 'fadeInOverlay 0.3s ease-out reverse';
        setTimeout(() => {
            overlay.style.display = 'none';
            document.body.classList.remove('settings-open');
        }, 250);
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞
function initAirQualityHint() {
    const questionBtn = document.getElementById('air-quality-question');
    const overlay = document.getElementById('air-quality-overlay');
    const closeBtn = document.getElementById('close-air-quality-hint');

    if (!questionBtn || !overlay || !closeBtn) return;

    questionBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        overlay.style.animation = 'none';
        requestAnimationFrame(() => {
            overlay.style.display = 'flex';
            overlay.style.animation = 'fadeInOverlay 0.3s ease-out';
            document.body.classList.add('settings-open');
        });
    });

    closeBtn.addEventListener('click', function() {
        closeAirQualityHint();
    });

    overlay.addEventListener('click', function(e) {
        if (e.target === overlay) {
            closeAirQualityHint();
        }
    });

    function closeAirQualityHint() {
        overlay.style.animation = 'fadeInOverlay 0.3s ease-out reverse';
        setTimeout(() => {
            overlay.style.display = 'none';
            document.body.classList.remove('settings-open');
        }, 250);
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
function showServicesDetails() {
    const normal = document.getElementById('services-normal');
    const details = document.getElementById('services-details');
    
    if (normal && details) {
        normal.style.animation = 'scaleIn 0.3s ease-out reverse';
        setTimeout(() => {
            normal.style.display = 'none';
            details.style.display = 'block';
            details.style.animation = 'scaleIn 0.3s ease-out';
        }, 150);
    }
}

function hideServicesDetails() {
    const normal = document.getElementById('services-normal');
    const details = document.getElementById('services-details');
    
    if (normal && details) {
        details.style.animation = 'scaleIn 0.3s ease-out reverse';
        setTimeout(() => {
            details.style.display = 'none';
            normal.style.display = 'block';
            normal.style.animation = 'scaleIn 0.3s ease-out';
        }, 150);
    }
}

function selectFavoriteCity(cityName, lat, lon) {
    getWeatherByCoords(lat, lon);
    closeFavoritesPanel();
}

function closeFavoritesPanel() {
    const overlay = document.getElementById('favorites-overlay');
    if (overlay) {
        overlay.style.display = 'none';
        document.body.classList.remove('settings-open');
    }
}

function toggleFavorite() {
    if (currentCityData) {
        if (isCityInFavorites(currentCity)) {
            removeFromFavorites(currentCity);
        } else {
            addToFavorites(currentCityData);
        }
    } else {
        showFavoritesPanel();
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –≠–ö–†–ê–ù–ê –ó–ê–ì–†–£–ó–ö–ò ==========
function updateLoadingText() {
    const now = new Date();
    const hour = now.getHours();
    const loadingText = document.getElementById('loading-time-text');

    if (!loadingText) return;

    if (hour >= 5 && hour < 8) {
        loadingText.textContent = "–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç, –ø–æ–∫–∞ –≤—ã –≥–æ—Ç–æ–≤–∏—Ç–µ —É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ—Ñ–µ";
    } else if (hour >= 8 && hour < 15) {
        loadingText.textContent = "–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç –ø–æ–∫–∞ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ";
    } else if (hour >= 15 && hour < 19) {
        const eveningTexts = [
            "–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç –ø–æ–∫–∞ –≤—ã –Ω–∞—Å–ª–∞–∂–¥–∞–µ—Ç–µ—Å—å –≤–µ—á–µ—Ä–æ–º",
            "–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç –ø–æ–∫–∞ –≤—ã –æ—Ç–¥—ã—Ö–∞–µ—Ç–µ –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã",
            "–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç –ø–æ–∫–∞ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –≤–µ—á–µ—Ä–Ω–∏–µ –¥–µ–ª–∞"
        ];
        loadingText.textContent = eveningTexts[Math.floor(Math.random() * eveningTexts.length)];
    } else if (hour >= 19 && hour < 23) {
        loadingText.textContent = "–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç –ø–æ–∫–∞ –≤—ã –≥–æ—Ç–æ–≤–∏—Ç–µ—Å—å –∫–æ —Å–Ω—É";
    } else {
        loadingText.textContent = "–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∞–π—Ç –ø–æ–∫–∞ –≤—ã —Å–ø–∏—Ç–µ";
    }
}

function showLoadingScreen() {
    const loadingScreen = document.getElementById('loading-screen');
    if (loadingScreen) {
        loadingScreen.style.display = 'flex';
        updateLoadingText();
    }
}

function hideLoadingScreen() {
    const loadingScreen = document.getElementById('loading-screen');
    if (!loadingScreen) return;

    loadingScreen.classList.add('fade-out');

    setTimeout(() => {
        loadingScreen.style.display = 'none';

        // –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
        if (isFirstLoad) {
            iosNotifications.success('–ì–æ—Ç–æ–≤–æ', 'Weather Overcast –∑–∞–≥—Ä—É–∂–µ–Ω', 3000);
            isFirstLoad = false;
        }

        const container = document.querySelector('.container');
        const header = document.querySelector('header');

        if (container) container.classList.add('show');
        if (header) header.classList.add('show');
    }, 500);
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–†–£–°–ï–õ–ò –°–û–í–ï–¢–û–í ==========
function initTipCarousel() {
    const dots = document.querySelectorAll('.dot');
    const slides = document.querySelectorAll('.tip-slide');

    dots.forEach(dot => {
        dot.addEventListener('click', function() {
            const slideIndex = parseInt(this.getAttribute('data-slide'));

            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö
            dots.forEach(d => d.classList.remove('active'));
            slides.forEach(s => s.classList.remove('active'));

            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É
            this.classList.add('active');
            slides[slideIndex].classList.add('active');
        });
    });

    // –ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 8 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        const activeDot = document.querySelector('.dot.active');
        if (!activeDot) return;

        const nextIndex = (parseInt(activeDot.getAttribute('data-slide')) + 1) % dots.length;

        dots.forEach(d => d.classList.remove('active'));
        slides.forEach(s => s.classList.remove('active'));

        dots[nextIndex].classList.add('active');
        slides[nextIndex].classList.add('active');
    }, 8000);
}

async function updateWeatherTip(data, forecastData) {
    const tipText = document.getElementById('tip-text');
    const factText = document.getElementById('fact-text');

    if (!tipText || !factText) return;

    const hasRainToday = checkRainToday(forecastData);

    if (hasRainToday.found) {
        tipText.textContent = `–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç. –í–æ–∑–º–æ–∂–µ–Ω –¥–æ–∂–¥—å –≤ ${hasRainToday.time}`;
    } else {
        try {
            const sunrise = await getCorrectLocalTime(data.sys.sunrise, data.coord.lat, data.coord.lon);
            const sunset = await getCorrectLocalTime(data.sys.sunset, data.coord.lat, data.coord.lon);
            const sunriseTime = formatTime(sunrise);
            const sunsetTime = formatTime(sunset);

            tipText.textContent = `–ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —Ä–∞—Å—Å–≤–µ—Ç –≤ ${sunriseTime} –∏ –∑–∞–∫–∞—Ç –≤ ${sunsetTime}`;
        } catch (error) {
            tipText.textContent = '–°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫!';
        }
    }

    // –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–≥–æ–¥–µ
    const facts = [
        "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ —Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –ó–µ–º–ª–µ –±—ã–ª–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –≤ –î–æ–ª–∏–Ω–µ –°–º–µ—Ä—Ç–∏: 56.7¬∞C!",
        "–õ–µ–¥—è–Ω—ã–µ –¥–æ–∂–¥–∏ –æ–±—Ä–∞–∑—É—é—Ç—Å—è, –∫–æ–≥–¥–∞ —Å–Ω–µ–≥ —Ç–∞–µ—Ç –≤ —Ç–µ–ø–ª–æ–º —Å–ª–æ–µ –≤–æ–∑–¥—É—Ö–∞, –∞ –∑–∞—Ç–µ–º –∑–∞–º–µ—Ä–∑–∞–µ—Ç –≤ —Ö–æ–ª–æ–¥–Ω–æ–º —É –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.",
        "–ú–æ–ª–Ω–∏—è –º–æ–∂–µ—Ç –Ω–∞–≥—Ä–µ–≤–∞—Ç—å –≤–æ–∑–¥—É—Ö –≤–æ–∫—Ä—É–≥ —Å–µ–±—è –¥–æ 30,000¬∞C - —ç—Ç–æ –≤ 5 —Ä–∞–∑ –≥–æ—Ä—è—á–µ–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –°–æ–ª–Ω—Ü–∞!",
        "–í –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∞–º–æ–µ —Å—É—Ö–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –ó–µ–º–ª–µ - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–π–æ–Ω—ã –Ω–µ –≤–∏–¥–µ–ª–∏ –¥–æ–∂–¥—è 2 –º–∏–ª–ª–∏–æ–Ω–∞ –ª–µ—Ç.",
        "–û–±–ª–∞–∫–∞ –∫–∞–∂—É—Ç—Å—è –±–µ–ª—ã–º–∏ –ø–æ—Ç–æ–º—É, —á—Ç–æ –∫–∞–ø–ª–∏ –≤–æ–¥—ã —Ä–∞—Å—Å–µ–∏–≤–∞—é—Ç –≤—Å–µ —Ü–≤–µ—Ç–∞ —Å–ø–µ–∫—Ç—Ä–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ.",
        "–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –≥—Ä–∞–¥ –≤–µ—Å–∏–ª –æ–∫–æ–ª–æ 1 –∫–≥ –∏ –≤—ã–ø–∞–ª –≤ –ë–∞–Ω–≥–ª–∞–¥–µ—à –≤ 1986 –≥–æ–¥—É.",
        "–†–∞–¥—É–≥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç –ø—Ä–µ–ª–æ–º–ª—è–µ—Ç—Å—è –≤ –∫–∞–ø–ª—è—Ö –≤–æ–¥—ã –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —É–≥–ª–æ–º."
    ];

    factText.textContent = facts[Math.floor(Math.random() * facts.length)];
}

function checkRainToday(forecastData) {
    if (!forecastData || !forecastData.list) return { found: false };

    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const tomorrow = new Date(today.getTime() + 86400000);

    for (let item of forecastData.list) {
        const itemTime = new Date(item.dt * 1000);
        if (itemTime >= today && itemTime < tomorrow) {
            if (item.rain || item.snow || 
                (item.weather && item.weather[0].main.toLowerCase().includes('rain'))) {
                return {
                    found: true,
                    time: formatTime(itemTime)
                };
            }
        }
    }

    return { found: false };
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
function getWindStrength(speedMps) {
    const speedKmh = speedMps * 3.6;

    if (speedKmh < 1) return '–®—Ç–∏–ª—å';
    else if (speedKmh < 11) return '–õ–µ–≥–∫–∏–π –≤–µ—Ç–µ—Ä';
    else if (speedKmh < 19) return '–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä';
    else if (speedKmh < 29) return '–°–≤–µ–∂–∏–π –≤–µ—Ç–µ—Ä';
    else if (speedKmh < 39) return '–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä';
    else if (speedKmh < 50) return '–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä';
    else if (speedKmh < 62) return '–®—Ç–æ—Ä–º–æ–≤–æ–π –≤–µ—Ç–µ—Ä';
    else return '–®—Ç–æ—Ä–º';
}

function getWindDirection(degrees) {
    const directions = ['–°', '–°–í', '–í', '–Æ–í', '–Æ', '–Æ–ó', '–ó', '–°–ó'];
    const index = Math.round(degrees / 45) % 8;
    return directions[index];
}

function translateWeather(description) {
    return weatherTranslations[description] || description;
}

function calculateDewPoint(temp, humidity) {
    if (humidity === 0) return -273.15;

    const a = 17.27;
    const b = 237.7;
    const alpha = ((a * temp) / (b + temp)) + Math.log(humidity / 100.0);
    return (b * alpha) / (a - alpha);
}

// ========== –ü–†–û–°–¢–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –õ–£–ù–´ –ë–ï–ó –í–ù–ï–®–ù–ò–• API ==========
async function calculateMoonInfo() {
    try {
        console.log('–í—ã—á–∏—Å–ª—è–µ–º —Ñ–∞–∑—É –ª—É–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ...');
        return calculateSimpleMoonPhase();
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ª—É–Ω—ã:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return {
            phase: '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞',
            illumination: 45,
            age: 7,
            phasePercent: 45,
            isWaning: false,
            nextPhase: '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å', 
            daysToNext: 2
        };
    }
}

function calculateSimpleMoonPhase() {
    const now = new Date();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–æ–≤–æ–ª—É–Ω–∏–µ –∫–∞–∫ —Ç–æ—á–∫—É –æ—Ç—Å—á–µ—Ç–∞
    const knownNewMoon = new Date('2024-12-01T06:21:00Z').getTime();
    const currentTime = now.getTime();
    
    // –õ—É–Ω–Ω—ã–π —Ü–∏–∫–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (29.53 –¥–Ω—è)
    const lunarCycleMs = 29.53 * 24 * 60 * 60 * 1000;
    
    // –í–æ–∑—Ä–∞—Å—Ç –ª—É–Ω—ã –≤ –¥–Ω—è—Ö (0-29.53)
    const moonAgeDays = ((currentTime - knownNewMoon) % lunarCycleMs) / (24 * 60 * 60 * 1000);
    
    // –§–∞–∑–∞ –ª—É–Ω—ã (0-1)
    const phase = moonAgeDays / 29.53;
    
    console.log('–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ª—É–Ω—ã:', { moonAgeDays, phase });
    
    return formatMoonPhase(phase);
}

function formatMoonPhase(phase) {
    console.log('Phase from calculation:', phase);
    
    let phaseName, phasePercent, isWaning;
    
    if (phase < 0.02 || phase > 0.98) {
        phaseName = '–ù–æ–≤–æ–ª—É–Ω–∏–µ';
        phasePercent = 0;
        isWaning = false;
    } else if (phase < 0.25) {
        phaseName = '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞';
        phasePercent = Math.round(phase * 4 * 25);
        isWaning = false;
    } else if (phase < 0.27) {
        phaseName = '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å';
        phasePercent = 50;
        isWaning = false;
    } else if (phase < 0.5) {
        phaseName = '–ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞';
        phasePercent = 50 + Math.round((phase - 0.25) * 4 * 25);
        isWaning = false;
    } else if (phase < 0.52) {
        phaseName = '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ';
        phasePercent = 100;
        isWaning = false;
    } else if (phase < 0.75) {
        phaseName = '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞';
        phasePercent = 100 - Math.round((phase - 0.5) * 4 * 25);
        isWaning = true;
    } else if (phase < 0.77) {
        phaseName = '–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å';
        phasePercent = 50;
        isWaning = true;
    } else {
        phaseName = '–°—Ç–∞—Ä–∞—è –ª—É–Ω–∞';
        phasePercent = 50 - Math.round((phase - 0.75) * 4 * 25);
        isWaning = true;
    }
    
    const illumination = Math.round(Math.abs(Math.sin(2 * Math.PI * phase)) * 100);
    
    console.log('Calculated illumination:', illumination);
    
    return {
        phase: phaseName,
        illumination: illumination,
        age: Math.round(phase * 29.53),
        phasePercent: phasePercent,
        isWaning: isWaning,
        nextPhase: getNextPhase(phaseName),
        daysToNext: getDaysToNext(phase)
    };
}

function getNextPhase(currentPhase) {
    const phases = ['–ù–æ–≤–æ–ª—É–Ω–∏–µ', '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞', '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å', '–ü—Ä–∏–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞', '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞', '–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å', '–°—Ç–∞—Ä–∞—è –ª—É–Ω–∞'];
    const currentIndex = phases.indexOf(currentPhase);
    return phases[(currentIndex + 1) % phases.length];
}

function getDaysToNext(phase) {
    if (phase < 0.25) return Math.round((0.25 - phase) * 29.53);
    if (phase < 0.5) return Math.round((0.5 - phase) * 29.53);
    if (phase < 0.75) return Math.round((0.75 - phase) * 29.53);
    return Math.round((1 - phase) * 29.53);
}

function updateMoonVisualization(phasePercent, isWaning) {
    const moonPhase = document.getElementById('moon-phase');
    if (!moonPhase) return;

    console.log('–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª—É–Ω—ã:', { phasePercent, isWaning });

    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
    moonPhase.style.cssText = '';

    // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
    moonPhase.style.position = 'absolute';
    moonPhase.style.top = '0';
    moonPhase.style.left = '0';
    moonPhase.style.width = '100%';
    moonPhase.style.height = '100%';
    moonPhase.style.borderRadius = '50%';
    moonPhase.style.background = '#f1c40f';
    moonPhase.style.boxShadow = 'inset 0 0 10px rgba(241, 196, 15, 0.8)';

    if (phasePercent === 0) {
        moonPhase.style.clipPath = 'inset(0 0 0 100%)';
    } else if (phasePercent === 100) {
        moonPhase.style.clipPath = 'inset(0 0 0 0%)';
    } else {
        if (isWaning) {
            const visiblePercent = phasePercent;
            moonPhase.style.clipPath = `inset(0 ${100 - visiblePercent}% 0 0)`;
        } else {
            const visiblePercent = phasePercent;
            moonPhase.style.clipPath = `inset(0 0 0 ${100 - visiblePercent}%)`;
        }
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û –ü–û–ì–û–î–ï ==========
async function getAirQuality(lat, lon) {
    try {
        const controller = new AbortController();
        const timeoutDuration = 10000; // 10 —Å–µ–∫—É–Ω–¥
        
        const timeoutId = setTimeout(() => {
            console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞ - –æ—Ç–º–µ–Ω—è–µ–º...');
            controller.abort();
        }, timeoutDuration);
        
        const response = await fetch(
            `${AIR_POLLUTION_URL}?lat=${lat}&lon=${lon}&appid=${API_KEY}`,
            { 
                signal: controller.signal,
                method: 'GET'
            }
        );
        
        clearTimeout(timeoutId);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const data = await response.json();
        return data;
        
    } catch (error) {
        console.log('‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:', error.message);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –æ—à–∏–±–∫–∏
        return null;
    }
}

// ========== –†–ï–ó–ï–†–í–ù–´–ï –î–ê–ù–ù–´–ï –ü–†–ò –û–®–ò–ë–ö–ê–• ==========
function showFallbackWeatherData() {
    console.log('üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
    
    // –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const fallbackData = {
        name: currentCity || '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
        main: {
            temp: 15,
            feels_like: 14,
            humidity: 65,
            pressure: 750
        },
        weather: [{ description: '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è', main: 'Clouds' }],
        wind: { speed: 3 },
        sys: { 
            sunrise: Math.floor(Date.now() / 1000) + 21600, // +6 —á–∞—Å–æ–≤
            sunset: Math.floor(Date.now() / 1000) + 64800   // +18 —á–∞—Å–æ–≤
        },
        visibility: 10
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const temp = convertTemperature(fallbackData.main.temp, currentUnits);
    const feelsLike = convertTemperature(fallbackData.main.feels_like, currentUnits);
    
    document.getElementById('current-temp').innerHTML = `
        <span class="temp-bullet">‚óè</span>
        <span class="temp-value">${temp}${getTemperatureSymbol(currentUnits)}</span>
    `;
    document.getElementById('feels-like').textContent = `–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${feelsLike}${getTemperatureSymbol(currentUnits)}`;
    document.getElementById('weather-description').textContent = '–î–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    document.getElementById('wind-details').innerHTML = `
        <div class="tile-content-item">
            <span>‚óè</span>
            <span>-- –∫–º/—á</span>
        </div>
    `;
    
    document.getElementById('pressure-details').innerHTML = `
        <div class="tile-content-item">
            <span>‚óè</span>
            <span>${fallbackData.main.pressure} –º–º —Ä—Ç. —Å—Ç.</span>
        </div>
    `;
    
    document.getElementById('humidity-details').innerHTML = `
        <div class="tile-content-item">
            <span>‚óè</span>
            <span>${fallbackData.main.humidity}%</span>
        </div>
    `;
    
    document.getElementById('rain-info').innerHTML = `
        <span>‚óè</span>
        <span>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è</span>
    `;
    
    document.getElementById('wind-info').innerHTML = `
        <span>‚óè</span>
        <span>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è</span>
    `;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    iosNotifications.info('–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', '–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', 3000);
}

async function getWeatherByCoords(lat, lon) {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ç–∏
    if (!navigator.onLine) {
        console.log('üì° –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
        iosNotifications.warning('–ù–µ—Ç —Å–µ—Ç–∏', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É', 4000);
        hideLoadingScreen();
        showFallbackWeatherData();
        return;
    }
    
    try {
        showLoadingScreen();
        
        // –°–æ–∑–¥–∞–µ–º AbortController —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        const controller = new AbortController();
        const timeoutDuration = 15000; // 15 —Å–µ–∫—É–Ω–¥
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        const timeoutId = setTimeout(() => {
            console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ - –æ—Ç–º–µ–Ω—è–µ–º...');
            controller.abort();
        }, timeoutDuration);
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞
        const clearTimeout = () => {
            if (timeoutId) {
                window.clearTimeout(timeoutId);
            }
        };
        
        try {
            const [weatherData, forecastData, airQualityData] = await Promise.all([
                fetch(`${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric&lang=ru`, {
                    signal: controller.signal
                }).then(async r => {
                    if (!r.ok) throw new Error(`HTTP error! status: ${r.status}`);
                    return await r.json();
                }),
                fetch(`${BASE_URL}/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric&lang=ru`, {
                    signal: controller.signal
                }).then(async r => {
                    if (!r.ok) throw new Error(`HTTP error! status: ${r.status}`);
                    return await r.json();
                }),
                getAirQuality(lat, lon)
            ]);

            // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω—ã
            clearTimeout();

            if (weatherData.cod === 200) {
                currentCityData = weatherData;
                currentCity = weatherData.name;
                
                await updateWeatherData(weatherData, forecastData, airQualityData);
                updateMapLocation(lat, lon);
                
                // –ö–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                if (!isFirstLoad) {
                    iosNotifications.success('–û–±–Ω–æ–≤–ª–µ–Ω–æ', `–ü–æ–≥–æ–¥–∞ –¥–ª—è ${weatherData.name}`, 2000);
                }
            } else {
                throw new Error(weatherData.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API');
            }
            
        } catch (fetchError) {
            clearTimeout();
            throw fetchError; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error);
        
        // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ';
        
        if (error.name === 'AbortError') {
            errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ';
            console.log('üïí –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞');
        } else if (error.message.includes('Failed to fetch')) {
            errorMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ–≥–æ–¥—ã';
            console.log('üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API');
        } else if (error.message.includes('HTTP error')) {
            errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–≥–æ–¥—ã';
            console.log('üö´ –û—à–∏–±–∫–∞ HTTP –æ—Ç API');
        } else {
            console.log('‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞:', error.message);
        }
        
        iosNotifications.error('–û—à–∏–±–∫–∞', errorMessage, 4000);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        showFallbackWeatherData();
    } finally {
        setTimeout(hideLoadingScreen, 1000);
    }
}

async function getWeatherByCity(city) {
    try {
        showLoadingScreen();
        const weatherResponse = await fetch(
            `${BASE_URL}/weather?q=${city}&appid=${API_KEY}&units=metric&lang=ru`
        );
        const weatherData = await weatherResponse.json();

        if (weatherData.cod === 200) {
            currentCityData = weatherData;
            currentCity = weatherData.name;
            const [forecastData, airQualityData] = await Promise.all([
                getForecast(weatherData.coord.lat, weatherData.coord.lon),
                getAirQuality(weatherData.coord.lat, weatherData.coord.lon)
            ]);

            await updateWeatherData(weatherData, forecastData, airQualityData);
            updateMapLocation(weatherData.coord.lat, weatherData.coord.lon);
            
            // –ö–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if (!isFirstLoad) {
                iosNotifications.success('–ì–æ—Ä–æ–¥ –∏–∑–º–µ–Ω–µ–Ω', `–¢–µ–ø–µ—Ä—å —Å–º–æ—Ç—Ä–∏–º ${weatherData.name}`, 2000);
            }
        } else {
            throw new Error(weatherData.message);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã:', error);
        iosNotifications.error('–û—à–∏–±–∫–∞', '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω', 3000);
    } finally {
        setTimeout(hideLoadingScreen, 1000);
    }
}

async function getForecast(lat, lon) {
    try {
        const response = await fetch(
            `${BASE_URL}/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric&lang=ru`
        );
        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:', error);
        return null;
    }
}

// ========== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• ==========
async function updateWeatherData(data, forecastData, airQualityData) {
    // –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï
    const temp = applyTemperatureShift(data.main.temp);
    const feelsLike = applyTemperatureShift(data.main.feels_like);
    const weatherDesc = translateWeather(data.weather[0].description);

    document.getElementById('current-temp').innerHTML = `
        <span class="temp-bullet">‚óè</span>
        <span class="temp-value">${temp}${getTemperatureSymbol(currentUnits)}</span>
    `;
    document.getElementById('feels-like').textContent = `–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${feelsLike}${getTemperatureSymbol(currentUnits)}`;
    document.getElementById('weather-description').textContent = weatherDesc;

    // –í–ï–¢–ï–†
    const windSpeed = Math.round(data.wind.speed * 3.6);
    const windGust = data.wind.gust ? Math.round(data.wind.gust * 3.6) : windSpeed + 5;
    const windDir = getWindDirection(data.wind.deg);
    const windStrength = getWindStrength(data.wind.speed);

    document.getElementById('wind-details').innerHTML = `
        <div class="tile-content-item">
            <span>‚óè</span>
            <span>${windSpeed} –∫–º/—á</span>
        </div>
        <div class="tile-content-item">
            <span>‚óè</span>
            <span>${windDir} - ${windStrength}</span>
        </div>
        <div class="tile-content-item">
            <span>‚óè</span>
            <span>–ü–æ—Ä—ã–≤—ã –¥–æ ${windGust} –∫–º/—á</span>
        </div>
    `;

    // –î–ê–í–õ–ï–ù–ò–ï
    const pressure = Math.round(data.main.pressure * 0.750062);
    const pressureStatus = pressure >= 745 && pressure <= 755 ? '–ù–æ—Ä–º–∞–ª—å–Ω–æ–µ' : 
                             pressure > 755 ? '–í—ã—Å–æ–∫–æ–µ' : '–ù–∏–∑–∫–æ–µ';

    document.getElementById('pressure-details').innerHTML = `
        <div class="tile-content-item">
            <span>‚óè</span>
            <span>${pressure} –º–º —Ä—Ç. —Å—Ç.</span>
        </div>
        <div class="tile-content-item">
            <span>‚óè</span>
            <span>${pressureStatus}</span>
        </div>
    `;

    // –í–õ–ê–ñ–ù–û–°–¢–¨
    const humidity = data.main.humidity;
    const humidityStatus = humidity < 30 ? '–°—É—Ö–æ' : 
                             humidity < 60 ? '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ' : 
                             humidity < 80 ? '–í–ª–∞–∂–Ω–æ' : '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è';

    document.getElementById('humidity-details').innerHTML = `
        <div class="tile-content-item">
            <span>‚óè</span>
            <span>${humidity}%</span>
        </div>
        <div class="tile-content-item">
            <span>‚óè</span>
            <span>${humidityStatus}</span>
        </div>
    `;

    // –í–ò–î–ò–ú–û–°–¢–¨
    const visibility = (data.visibility / 1000).toFixed(1);
    const visibilityStatus = visibility > 20 ? '–û—Ç–ª–∏—á–Ω–∞—è' : 
                               visibility > 10 ? '–•–æ—Ä–æ—à–∞—è' : 
                               visibility > 5 ? '–£–º–µ—Ä–µ–Ω–Ω–∞—è' : '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è';

    document.getElementById('visibility-details').innerHTML = `
        <div class="tile-content-item">
            <span>‚óè</span>
            <span>${visibility} –∫–º</span>
        </div>
        <div class="tile-content-item">
            <span>‚óè</span>
            <span>${visibilityStatus}</span>
        </div>
    `;

    // –¢–û–ß–ö–ê –†–û–°–´
    const dewPoint = calculateDewPoint(data.main.temp, data.main.humidity);
    let comfortLevel, comfortDescription;

    if (dewPoint < 10) {
        comfortLevel = '–û—á–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ';
        comfortDescription = '–°—É—Ö–æ–π –∏ –ø—Ä–∏—è—Ç–Ω—ã–π –≤–æ–∑–¥—É—Ö';
    } else if (dewPoint < 13) {
        comfortLevel = '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ';
        comfortDescription = '–ü—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
    } else if (dewPoint < 16) {
        comfortLevel = '–£–º–µ—Ä–µ–Ω–Ω–æ';
        comfortDescription = '–ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è';
    } else if (dewPoint < 18) {
        comfortLevel = '–ù–µ–º–Ω–æ–≥–æ –≤–ª–∞–∂–Ω–æ';
        comfortDescription = '–ß—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å';
    } else if (dewPoint < 21) {
        comfortLevel = '–í–ª–∞–∂–Ω–æ';
        comfortDescription = '–ù–µ –æ—á–µ–Ω—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ';
    } else if (dewPoint < 24) {
        comfortLevel = '–û—á–µ–Ω—å –≤–ª–∞–∂–Ω–æ';
        comfortDescription = '–û—â—É—â–∞–µ—Ç—Å—è —Ç—è–∂–µ–ª–æ';
    } else {
        comfortLevel = '–ö—Ä–∞–π–Ω–µ –≤–ª–∞–∂–Ω–æ';
        comfortDescription = '–û—á–µ–Ω—å –Ω–µ–∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ';
    }

    document.getElementById('dew-point-details').innerHTML = `
        <div class="dew-point-value">${dewPoint.toFixed(1)}¬∞C</div>
        <div class="dew-point-comfort">${comfortLevel}</div>
        <div class="dew-point-info">${comfortDescription}</div>
        <div class="dew-point-info">–í–ª–∞–∂–Ω–æ—Å—Ç—å: ${data.main.humidity}%</div>
        <div class="dew-point-info">–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${Math.round(data.main.temp)}¬∞C</div>
    `;

           // –†–ê–°–°–í–ï–¢ –ò –ó–ê–ö–ê–¢ - –ò–°–ü–û–õ–¨–ó–£–ï–ú –í–†–ï–ú–Ø –ö–ê–ö –ï–°–¢–¨ –ò–ó API
    try {
        // OpenWeatherMap —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ timestamp
        const sunrise = new Date(data.sys.sunrise * 1000);
        const sunset = new Date(data.sys.sunset * 1000);
        
        console.log('–†–∞—Å—Å–≤–µ—Ç:', sunrise);
        console.log('–ó–∞–∫–∞—Ç:', sunset);
        
        document.getElementById('sunrise-time').textContent = formatTime(sunrise);
        document.getElementById('sunset-time').textContent = formatTime(sunset);
        document.getElementById('sun-times-city').textContent = data.name;
    } catch (error) {
        console.log('–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:', error);
        // –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ –µ—Å—Ç—å
        const sunrise = new Date(data.sys.sunrise * 1000);
        const sunset = new Date(data.sys.sunset * 1000);
        
        document.getElementById('sunrise-time').textContent = formatTime(sunrise);
        document.getElementById('sunset-time').textContent = formatTime(sunset);
        document.getElementById('sun-times-city').textContent = data.name;
    }

    // –û–°–ê–î–ö–ò –í –û–°–ù–û–í–ù–û–ú –ë–õ–û–ö–ï
    if (data.rain) {
        const rainVolume = data.rain['1h'] || data.rain['3h'] || 0;
        document.getElementById('rain-info').innerHTML = `
            <span>‚óè</span>
            <span>–û—Å–∞–¥–∫–∏: ${rainVolume} –º–º</span>
        `;
    } else {
        document.getElementById('rain-info').innerHTML = `
            <span>‚óè</span>
            <span>–ë–µ–∑ –æ—Å–∞–¥–∫–æ–≤</span>
        `;
    }

    // –í–ï–¢–ï–† –í –û–°–ù–û–í–ù–û–ú –ë–õ–û–ö–ï
    document.getElementById('wind-info').innerHTML = `
        <span>‚óè</span>
        <span>${data.wind.speed} –º/—Å, ${windDir}, ${windStrength}</span>
    `;

    // –û–ë–ù–û–í–õ–Ø–ï–ú –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ
    updateAdditionalInfo(data, airQualityData);

    // –û–ë–ù–û–í–õ–Ø–ï–ú –ü–†–û–ì–ù–û–ó–´ –ò –°–û–í–ï–¢
    if (forecastData) {
        updateHourlyForecast(forecastData, data);
        updateWeeklyForecast(forecastData);
        updateWeatherTip(data, forecastData);
    }

    // –û–ë–ù–û–í–õ–Ø–ï–ú –ö–ù–û–ü–ö–£ –ò–ó–ë–†–ê–ù–ù–û–ì–û
    updateFavoriteButton(isCityInFavorites(data.name));

    // –û–ë–ù–û–í–õ–Ø–ï–ú –¢–ï–ú–£
    updateThemeByWeather(data.weather[0].main, data.sys);
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ==========
function updateAdditionalInfo(data, airQualityData) {
    updateAirQualityInfo(airQualityData);

    // –§–ê–ó–´ –õ–£–ù–´ - –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    loadMoonInfo();
}

function loadMoonInfo() {
    try {
        const moonInfo = calculateMoonInfo();
        
        moonInfo.then(info => {
            console.log('Moon info:', info); 
            
            document.getElementById('moon-phase-text').textContent = `–§–∞–∑–∞: ${info.phase}`;
            document.getElementById('moon-illumination').textContent = `–û—Å–≤–µ—â–µ–Ω–Ω–æ—Å—Ç—å: ${info.illumination}%`;
            document.getElementById('moon-age').textContent = `–í–æ–∑—Ä–∞—Å—Ç: ${info.age} –¥–Ω–µ–π`;
            document.getElementById('moon-next').textContent = `–°–ª–µ–¥—É—é—â–∞—è —Ñ–∞–∑–∞: ${info.nextPhase} (—á–µ—Ä–µ–∑ ${info.daysToNext} –¥–Ω–µ–π)`;

            updateMoonVisualization(info.phasePercent, info.isWaning);
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ª—É–Ω–µ:', error);
        document.getElementById('moon-phase-text').textContent = '–§–∞–∑–∞: –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã';
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–ß–ï–°–¢–í–ê –í–û–ó–î–£–•–ê ==========
function getPollutionLevel(value, pollutant) {
    const thresholds = {
        'pm2_5': [12, 35.4, 55.4, 150.4, 250.4],
        'pm10': [54, 154, 254, 354, 424],
        'o3': [54, 70, 85, 105, 200],
        'no2': [53, 100, 360, 649, 1249],
        'so2': [35, 75, 185, 304, 604],
        'co': [4.4, 9.4, 12.4, 15.4, 30.4]
    };

    const levels = ['—Ö–æ—Ä–æ—à–∏–π', '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π', '—É–º–µ—Ä–µ–Ω–Ω—ã–π', '–ø–ª–æ—Ö–æ–π', '–æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–π', '–æ–ø–∞—Å–Ω—ã–π'];
    const threshold = thresholds[pollutant] || thresholds.pm2_5;

    const adjustedValue = pollutant === 'co' ? value / 1000 : value;

    for (let i = 0; i < threshold.length; i++) {
        if (adjustedValue <= threshold[i]) return levels[i];
    }
    return levels[5];
}

function getPollutionLevelClass(level) {
    switch(level) {
        case '—Ö–æ—Ä–æ—à–∏–π': return 'level-good';
        case '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π': return 'level-moderate';
        case '—É–º–µ—Ä–µ–Ω–Ω—ã–π': return 'level-unhealthy-sensitive';
        case '–ø–ª–æ—Ö–æ–π': return 'level-unhealthy';
        case '–æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–π': return 'level-very-unhealthy';
        case '–æ–ø–∞—Å–Ω—ã–π': return 'level-hazardous';
        default: return 'level-good';
    }
}

function updateAirQualityInfo(airQualityData) {
    const airQualityElement = document.getElementById('air-quality');
    if (!airQualityElement) return;

    if (airQualityData && airQualityData.list && airQualityData.list.length > 0) {
        const airData = airQualityData.list[0];
        const aqi = airData.main.aqi;
        const components = airData.components;

        const aqiLevels = {
            1: { text: '–•–æ—Ä–æ—à–∏–π', class: 'level-good', advice: '–ò–¥–µ–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø—Ä–æ–≥—É–ª–æ–∫' },
            2: { text: '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π', class: 'level-moderate', advice: '–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è, –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ª—é–¥–µ–π' },
            3: { text: '–£–º–µ—Ä–µ–Ω–Ω—ã–π', class: 'level-unhealthy-sensitive', advice: '–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –Ω–∞ —É–ª–∏—Ü–µ' },
            4: { text: '–ü–ª–æ—Ö–æ–π', class: 'level-unhealthy', advice: '–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ' },
            5: { text: '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–π', class: 'level-very-unhealthy', advice: '–ò–∑–±–µ–≥–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ —É–ª–∏—Ü–µ' }
        };

        const aqiInfo = aqiLevels[aqi] || aqiLevels[1];

        airQualityElement.innerHTML = `
            <div class="tile-content-item">
                <span>‚óè</span>
                <span>–ò–Ω–¥–µ–∫—Å AQI: ${aqi} (${aqiInfo.text})</span>
            </div>
            <div class="tile-content-item">
                <span>‚óè</span>
                <span>${aqiInfo.advice}</span>
            </div>
            <div class="air-quality-details">
                <div class="pollutant-item">
                    <span>PM2.5: ${components.pm2_5.toFixed(1)} –º–∫–≥/–º¬≥</span>
                    <span class="pollutant-level ${getPollutionLevelClass(getPollutionLevel(components.pm2_5, 'pm2_5'))}">
                        ${getPollutionLevel(components.pm2_5, 'pm2_5')}
                    </span>
                </div>
                <div class="pollutant-item">
                    <span>PM10: ${components.pm10.toFixed(1)} –º–∫–≥/–º¬≥</span>
                    <span class="pollutant-level ${getPollutionLevelClass(getPollutionLevel(components.pm10, 'pm10'))}">
                        ${getPollutionLevel(components.pm10, 'pm10')}
                    </span>
                </div>
                <div class="pollutant-item">
                    <span>O‚ÇÉ: ${components.o3.toFixed(1)} –º–∫–≥/–º¬≥</span>
                    <span class="pollutant-level ${getPollutionLevelClass(getPollutionLevel(components.o3, 'o3'))}">
                        ${getPollutionLevel(components.o3, 'o3')}
                    </span>
                </div>
                <div class="pollutant-item">
                    <span>NO‚ÇÇ: ${components.no2.toFixed(1)} –º–∫–≥/–º¬≥</span>
                    <span class="pollutant-level ${getPollutionLevelClass(getPollutionLevel(components.no2, 'no2'))}">
                        ${getPollutionLevel(components.no2, 'no2')}
                    </span>
                </div>
                <div class="pollutant-item">
                    <span>SO‚ÇÇ: ${components.so2.toFixed(1)} –º–∫–≥/–º¬≥</span>
                    <span class="pollutant-level ${getPollutionLevelClass(getPollutionLevel(components.so2, 'so2'))}">
                        ${getPollutionLevel(components.so2, 'so2')}
                    </span>
                </div>
                <div class="pollutant-item">
                    <span>CO: ${(components.co / 1000).toFixed(1)} –º–≥/–º¬≥</span>
                    <span class="pollutant-level ${getPollutionLevelClass(getPollutionLevel(components.co, 'co'))}">
                        ${getPollutionLevel(components.co, 'co')}
                    </span>
                </div>
            </div>
        `;

        updateAirQualityHint(airData);
    } else {
        airQualityElement.innerHTML = `
            <div class="tile-content-item">
                <span>‚óè</span>
                <span>–î–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</span>
            </div>
        `;
    }
}

function updateAirQualityHint(airData) {
    const readings = document.querySelector('.current-readings');
    if (!readings || !airData) return;

    const components = airData.components;
    const aqi = airData.main.aqi;

    const aqiLevels = {
        1: '–•–æ—Ä–æ—à–∏–π',
        2: '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π', 
        3: '–£–º–µ—Ä–µ–Ω–Ω—ã–π',
        4: '–ü–ª–æ—Ö–æ–π',
        5: '–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–π'
    };

    readings.innerHTML = `
        <div class="reading-item">
            <span>AQI:</span>
            <span class="reading-value">${aqi} (${aqiLevels[aqi] || '–•–æ—Ä–æ—à–∏–π'})</span>
        </div>
        <div class="reading-item">
            <span>PM2.5:</span>
            <span class="reading-value">${components.pm2_5.toFixed(1)} –º–∫–≥/–º¬≥</span>
        </div>
        <div class="reading-item">
            <span>PM10:</span>
            <span class="reading-value">${components.pm10.toFixed(1)} –º–∫–≥/–º¬≥</span>
        </div>
        <div class="reading-item">
            <span>O‚ÇÉ:</span>
            <span class="reading-value">${components.o3.toFixed(1)} –º–∫–≥/–º¬≥</span>
        </div>
        <div class="reading-item">
            <span>NO‚ÇÇ:</span>
            <span class="reading-value">${components.no2.toFixed(1)} –º–∫–≥/–º¬≥</span>
        </div>
        <div class="reading-item">
            <span>SO‚ÇÇ:</span>
            <span class="reading-value">${components.so2.toFixed(1)} –º–∫–≥/–º¬≥</span>
        </div>
        <div class="reading-item">
            <span>CO:</span>
            <span class="reading-value">${(components.co / 1000).toFixed(1)} –º–≥/–º¬≥</span>
        </div>
    `;
}

function initAirQualityHint() {
    const questionBtn = document.getElementById('air-quality-question');
    const overlay = document.getElementById('air-quality-overlay');
    const closeBtn = document.getElementById('close-air-quality-hint');

    if (!questionBtn || !overlay || !closeBtn) return;

    questionBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        overlay.style.display = 'flex';
        document.body.classList.add('settings-open');
    });

    closeBtn.addEventListener('click', function() {
        closeAirQualityHint();
    });

    overlay.addEventListener('click', function(e) {
        if (e.target === overlay) {
            closeAirQualityHint();
        }
    });

    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && overlay.style.display === 'flex') {
            closeAirQualityHint();
        }
    });

    function closeAirQualityHint() {
        overlay.style.display = 'none';
        document.body.classList.remove('settings-open');
    }
}

// ========== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–†–û–ì–ù–û–ó–û–í ==========
function updateHourlyForecast(forecastData, currentWeatherData) {
    const container = document.getElementById('hourly-forecast');
    if (!container) return;

    container.innerHTML = '';

    const currentData = forecastData.city;
    const timezoneOffset = currentData.timezone;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ -1 —á–∞—Å
    const timeShift = 3600; // 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
const sunrise = new Date(currentData.sunrise * 1000);
const sunset = new Date(currentData.sunset * 1000);
    
    const now = new Date();

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ 7 –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ + —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ = 8 –∫–∞—Ä—Ç–æ—á–µ–∫
    const forecastToShow = forecastData.list.slice(0, 7);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É
    const currentTemp = applyTemperatureShift(currentWeatherData.main.temp);
    const currentWeatherIcon = getWeatherIcon(currentWeatherData.weather[0].main, currentWeatherData.main.temp);
    const currentWeatherDesc = translateWeather(currentWeatherData.weather[0].description);

    const currentHourCard = document.createElement('div');
    currentHourCard.className = 'hour-card current-card';
    currentHourCard.innerHTML = `
        <div class="hour-time">–°–µ–π—á–∞—Å</div>
        <div class="hour-icon">${currentWeatherIcon}</div>
        <div class="hour-temp">
            <span class="hour-temp-bullet">‚óè</span>
            <span>${currentTemp}${getTemperatureSymbol(currentUnits)}</span>
        </div>
        <div class="hour-weather">${currentWeatherDesc}</div>
    `;
    container.appendChild(currentHourCard);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Å—ã
    forecastToShow.forEach((forecast, index) => {
        // –£—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π -1 —á–∞—Å
const forecastTime = new Date(forecast.dt * 1000);

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø—Ä–æ—à–ª–æ–µ –≤—Ä–µ–º—è
        if (forecastTime < now) return;

        const timeString = formatTime(forecastTime);
        const temp = applyTemperatureShift(forecast.main.temp);
        const weatherIcon = getWeatherIcon(forecast.weather[0].main, forecast.main.temp);
        const weatherDesc = translateWeather(forecast.weather[0].description);

        const hourCard = document.createElement('div');
        hourCard.className = 'hour-card forecast-card';

        hourCard.innerHTML = `
            <div class="hour-time">${timeString}</div>
            <div class="hour-icon">${weatherIcon}</div>
            <div class="hour-temp">
                <span class="hour-temp-bullet">‚óè</span>
                <span>${temp}${getTemperatureSymbol(currentUnits)}</span>
            </div>
            <div class="hour-weather">${weatherDesc}</div>
        `;
        container.appendChild(hourCard);
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const title = document.querySelector('.hourly-forecast .section-title');
    if (title) {
        title.innerHTML = '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 8 —á–∞—Å–æ–≤ <span style="font-size: 14px; opacity: 0.7;">(—Ç–æ—á–Ω–æ—Å—Ç—å ~90%)</span>';
    }
}

function updateWeeklyForecast(forecastData) {
    const container = document.getElementById('forecast-week');
    if (!container) return;

    container.innerHTML = '';

    const dailyForecasts = [];
    for (let i = 0; i < forecastData.list.length; i += 8) {
        if (dailyForecasts.length < 7) {
            dailyForecasts.push(forecastData.list[i]);
        }
    }

    const dayNames = ['–í–°', '–ü–ù', '–í–¢', '–°–†', '–ß–¢', '–ü–¢', '–°–ë'];
    const today = new Date();
    const todayIndex = today.getDay();

    dailyForecasts.forEach((forecast, index) => {
        const dayCard = document.createElement('div');
        dayCard.className = 'forecast-day';

        const dayIndex = (todayIndex + index) % 7;
        const dayName = index === 0 ? '–°–ï–ì–û–î–ù–Ø' : dayNames[dayIndex];

        const tempMax = applyTemperatureShift(forecast.main.temp_max);
        const tempMin = applyTemperatureShift(forecast.main.temp_min);

        dayCard.innerHTML = `
            <div class="day-name">${dayName}</div>
            <div class="day-temps">
                <span class="temp-high">${tempMax}${getTemperatureSymbol(currentUnits)}</span>
                <span class="temp-low">${tempMin}${getTemperatureSymbol(currentUnits)}</span>
            </div>
        `;
        container.appendChild(dayCard);
    });
}

function getWeatherIcon(weatherMain, temperature) {
    const main = weatherMain.toLowerCase();
    const isNight = isCurrentlyNight();

    if (isNight) {
        switch(main) {
            case 'clear': return '‚óè';
            case 'clouds': return '‚óè';
            case 'rain': return '‚óè';
            case 'snow': return '‚óè';
            case 'thunderstorm': return '‚óè';
            case 'drizzle': return '‚óè';
            case 'mist': case 'fog': case 'haze': return '‚óè';
            default: return '‚óè';
        }
    } else {
        switch(main) {
            case 'clear': return '‚óè';
            case 'clouds': 
                if (temperature > 20) return '‚óè';
                return '‚óè';
            case 'rain': 
                if (temperature > 15) return '‚óè';
                return '‚óè';
            case 'snow': return '‚óè';
            case 'thunderstorm': return '‚óè';
            case 'drizzle': return '‚óè';
            case 'mist': case 'fog': case 'haze': return '‚óè';
            default: return '‚óè';
        }
    }
}

function isCurrentlyNight() {
    const now = new Date();
    const hour = now.getHours();
    return hour < 6 || hour > 20;
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–ï–ú ==========
function updateThemeByWeather(weatherMain, sys) {
    if (currentTheme !== 'dynamic') return;

    const now = new Date();
    const currentTime = now.getTime();
    const timezoneOffset = sys.timezone || 0;
const sunrise = new Date(sys.sunrise * 1000).getTime();
const sunset = new Date(sys.sunset * 1000).getTime();

    const isNight = currentTime < sunrise || currentTime > sunset;
    const themeClass = isNight ? 'night' : weatherMain.toLowerCase();

    document.body.className = themeClass;
}

function saveSettings() {
    localStorage.setItem('weatherUnits', currentUnits);
    localStorage.setItem('weatherTheme', currentTheme);
}

function loadSettings() {
    const savedUnits = localStorage.getItem('weatherUnits');
    const savedTheme = localStorage.getItem('weatherTheme');

    if (savedUnits) {
        currentUnits = savedUnits;
        const unitsText = {
            'celsius': '–¶–µ–ª—å—Å–∏–π (¬∞C)',
            'fahrenheit': '–§–∞—Ä–µ–Ω–≥–µ–π—Ç (¬∞F)',
            'kelvin': '–ö–µ–ª—å–≤–∏–Ω (K)'
        };
        const unitsElement = document.getElementById('current-units');
        if (unitsElement) {
            unitsElement.textContent = unitsText[currentUnits];
        }
    }

    if (savedTheme) {
        currentTheme = savedTheme;
        document.querySelectorAll('.theme-option').forEach(option => {
            option.classList.remove('active');
            if (option.getAttribute('data-theme') === currentTheme) {
                option.classList.add('active');
            }
        });

        if (currentTheme === 'light') {
            document.body.style.background = 'linear-gradient(135deg, #87CEEB, #E0F7FA)';
            document.body.style.color = '#333';
        } else if (currentTheme === 'dark') {
            document.body.style.background = 'linear-gradient(135deg, #2C3E50, #34495E)';
            document.body.style.color = '#FFFFFF';
        } else {
            document.body.style.background = '';
            document.body.style.color = '';
        }
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ê–†–¢–´ ==========
function initMap() {
    if (typeof ymaps === 'undefined') {
        console.error('Yandex Maps API –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        showNotification('–ö–∞—Ä—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
        return;
    }

    try {
        ymaps.ready(function() {
            map = new ymaps.Map('map', {
                center: [59.9343, 30.3351],
                zoom: 10
            });

            map.controls.remove('zoomControl');
            map.controls.remove('geolocationControl');
            map.controls.remove('searchControl');
            map.controls.remove('trafficControl');
            map.controls.remove('typeSelector');
            map.controls.remove('fullscreenControl');
            map.controls.remove('rulerControl');

            const overlay = document.createElement('div');
            overlay.className = 'map-overlay';
            overlay.innerHTML = '–ö–∞—Ä—Ç–∞';
            document.querySelector('.precipitation-map').appendChild(overlay);

            const mapLoading = document.querySelector('.map-loading');
            if (mapLoading) mapLoading.style.display = 'none';

            getUserLocation();
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã');
    }
}

function updateMapLocation(lat, lon) {
    if (map) {
        map.setCenter([lat, lon], 13);
        if (userPlacemark) {
            userPlacemark.geometry.setCoordinates([lat, lon]);
        }
    }
}

function getUserLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            position => {
                const lat = position.coords.latitude;
                const lng = position.coords.longitude;
                console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', lat, lng);
                getWeatherByCoords(lat, lng);

                if (map) {
                    if (userPlacemark) {
                        map.geoObjects.remove(userPlacemark);
                    }

                    userPlacemark = new ymaps.Placemark([lat, lng], {
                        balloonContent: '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
                    }, {
                        preset: 'islands#blueCircleDotIcon',
                        draggable: false
                    });

                    map.geoObjects.add(userPlacemark);
                }
            },
            error => {
                console.log('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);

                let errorMessage = '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
                switch(error.code) {
                    case error.PERMISSION_DENIED:
                        errorMessage = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
                        break;
                    case error.POSITION_UNAVAILABLE:
                        errorMessage = '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.';
                        break;
                    case error.TIMEOUT:
                        errorMessage = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ.';
                        break;
                }

                const fallbackLat = 59.9343;
                const fallbackLng = 30.3351;
                console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', fallbackLat, fallbackLng);
                getWeatherByCoords(fallbackLat, fallbackLng);
            },
            {
                enableHighAccuracy: true,
                timeout: 15000,
                maximumAge: 600000
            }
        );
    } else {
        console.log('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
        showNotification('–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é');

        const fallbackLat = 59.9343;
        const fallbackLng = 30.3351;
        getWeatherByCoords(fallbackLat, fallbackLng);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–í–¢–û–î–û–ü–û–õ–ù–ï–ù–ò–Ø ==========
function showSuggestions(query) {
    const suggestionsContainer = document.getElementById('search-suggestions');
    if (!suggestionsContainer) return;

    suggestionsContainer.innerHTML = '';

    if (query.length < 2) {
        suggestionsContainer.style.display = 'none';
        return;
    }

    const filteredCities = cityDatabase.filter(city => 
        city.name.toLowerCase().includes(query.toLowerCase()) ||
        city.region.toLowerCase().includes(query.toLowerCase())
    );

    if (filteredCities.length === 0) {
        suggestionsContainer.style.display = 'none';
        return;
    }

    filteredCities.forEach(city => {
        const item = document.createElement('div');
        item.className = 'suggestion-item';
        item.innerHTML = `
            <div class="suggestion-name">${city.name}</div>
            <div class="suggestion-details">${city.region}${city.distance ? ` ‚Ä¢ ${city.distance}` : ''}</div>
        `;
        item.addEventListener('click', () => {
            const searchInput = document.getElementById('city-search');
            if (searchInput) searchInput.value = city.name;
            suggestionsContainer.style.display = 'none';
            getWeatherByCity(city.name);
        });
        suggestionsContainer.appendChild(item);
    });

    suggestionsContainer.style.display = 'block';
}

// ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ò–ù–§–û–†–ú–ê–¶–ò–ò –û –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ï ==========
function initDeveloperInfo() {
    const developerBtn = document.getElementById('developer-info-btn');
    const developerOverlay = document.getElementById('developer-info-overlay');
    const closeDeveloperBtn = document.getElementById('close-developer-info');
    const avatarUpload = document.getElementById('avatar-upload');
    const avatarImage = document.getElementById('developer-avatar');
    const avatarPlaceholder = document.querySelector('.avatar-placeholder');
    const colorOptions = document.querySelectorAll('.color-option');
    const developerPanel = document.querySelector('.developer-panel');

    if (!developerBtn || !developerOverlay || !closeDeveloperBtn) return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    loadDeveloperSettings();

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    developerBtn.addEventListener('click', function() {
        developerOverlay.style.display = 'flex';
        document.body.classList.add('settings-open');
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    closeDeveloperBtn.addEventListener('click', function() {
        closeDeveloperInfo();
    });

    developerOverlay.addEventListener('click', function(e) {
        if (e.target === developerOverlay) {
            closeDeveloperInfo();
        }
    });

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && developerOverlay.style.display === 'flex') {
            closeDeveloperInfo();
        }
    });

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
    if (avatarUpload && avatarImage) {
        avatarUpload.addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    avatarImage.src = e.target.result;
                    avatarImage.style.display = 'block';
                    avatarPlaceholder.style.display = 'none';
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
                    localStorage.setItem('developerAvatar', e.target.result);
                    showNotification('–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
                };
                reader.readAsDataURL(file);
            }
        });
    }

    // –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
    colorOptions.forEach(option => {
        option.addEventListener('click', function() {
            const color = this.getAttribute('data-color');
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö
            colorOptions.forEach(opt => opt.classList.remove('active'));
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É
            this.classList.add('active');
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
            applyDeveloperTheme(color);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
            localStorage.setItem('developerTheme', color);
        });
    });

    function closeDeveloperInfo() {
        developerOverlay.style.display = 'none';
        document.body.classList.remove('settings-open');
    }
}

function loadDeveloperSettings() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
    const savedAvatar = localStorage.getItem('developerAvatar');
    const avatarImage = document.getElementById('developer-avatar');
    const avatarPlaceholder = document.querySelector('.avatar-placeholder');
    
    if (savedAvatar && avatarImage) {
        avatarImage.src = savedAvatar;
        avatarImage.style.display = 'block';
        avatarPlaceholder.style.display = 'none';
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Ç–µ–º—É
    const savedTheme = localStorage.getItem('developerTheme') || 'blue';
    applyDeveloperTheme(savedTheme);
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É
    const colorOptions = document.querySelectorAll('.color-option');
    colorOptions.forEach(option => {
        if (option.getAttribute('data-color') === savedTheme) {
            option.classList.add('active');
        } else {
            option.classList.remove('active');
        }
    });
}

function applyDeveloperTheme(color) {
    const developerPanel = document.querySelector('.developer-panel');
    if (!developerPanel) return;
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–º—ã
    developerPanel.classList.remove('blue-theme', 'purple-theme', 'green-theme', 'orange-theme');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É
    developerPanel.classList.add(`${color}-theme`);
}

// ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï ==========
document.addEventListener('DOMContentLoaded', () => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–∞–∑—É
    showLoadingScreen();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    loadSettings();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    initMap();
    initTipCarousel();
    initAirQualityHint();
    initDeveloperInfo();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    const citySearch = document.getElementById('city-search');
    if (citySearch) {
        citySearch.addEventListener('input', (e) => {
            showSuggestions(e.target.value);
        });

        citySearch.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const city = e.target.value.trim();
                if (city) {
                    getWeatherByCity(city);
                }
            }
        });
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –ø–æ–∏—Å–∫–∞
    document.addEventListener('click', (e) => {
        if (!e.target.closest('.search-container')) {
            const suggestionsContainer = document.getElementById('search-suggestions');
            if (suggestionsContainer) suggestionsContainer.style.display = 'none';
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const locateBtn = document.getElementById('locate-btn');
    if (locateBtn) {
        locateBtn.addEventListener('click', getUserLocation);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    const settingsBtn = document.getElementById('settings-btn');
    const settingsOverlay = document.getElementById('settings-overlay');
    const unitsBtn = document.getElementById('units-btn');
    const unitsDropdown = document.getElementById('units-dropdown');
    const themeOptions = document.querySelectorAll('.theme-option');

    if (settingsBtn && settingsOverlay) {
        settingsBtn.addEventListener('click', () => {
            settingsOverlay.style.display = 'flex';
            document.body.classList.add('settings-open');
        });

        settingsOverlay.addEventListener('click', (e) => {
            if (e.target === settingsOverlay) {
                settingsOverlay.style.display = 'none';
                document.body.classList.remove('settings-open');
            }
        });
    }

    if (unitsBtn && unitsDropdown) {
        unitsBtn.addEventListener('click', () => {
            unitsDropdown.style.display = unitsDropdown.style.display === 'block' ? 'none' : 'block';
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
    document.querySelectorAll('#units-dropdown .selector-option').forEach(option => {
        option.addEventListener('click', () => {
            currentUnits = option.getAttribute('data-units');
            const currentUnitsElement = document.getElementById('current-units');
            if (currentUnitsElement) {
                currentUnitsElement.textContent = option.textContent;
            }
            if (unitsDropdown) unitsDropdown.style.display = 'none';
            saveSettings();
            updateAllTemperatures();
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–º
    themeOptions.forEach(option => {
        option.addEventListener('click', () => {
            themeOptions.forEach(opt => opt.classList.remove('active'));
            option.classList.add('active');
            currentTheme = option.getAttribute('data-theme');

            if (currentTheme === 'light') {
                document.body.style.background = 'linear-gradient(135deg, #87CEEB, #E0F7FA)';
                document.body.style.color = '#333';
            } else if (currentTheme === 'dark') {
                document.body.style.background = 'linear-gradient(135deg, #2C3E50, #34495E)';
                document.body.style.color = '#FFFFFF';
            } else {
                document.body.style.background = '';
                document.body.style.color = '';
            }

            saveSettings();
        });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    const favoriteBtn = document.getElementById('favorite-btn');
    const closeFavoritesBtn = document.getElementById('close-favorites');
    const favoritesOverlay = document.getElementById('favorites-overlay');
    const favoritesListBtn = document.getElementById('favorites-list-btn');

    if (favoriteBtn) {
        favoriteBtn.addEventListener('click', toggleFavorite);
        favoriteBtn.addEventListener('dblclick', (e) => {
            e.preventDefault();
            showFavoritesPanel();
        });
    }

    if (favoritesListBtn) {
        favoritesListBtn.addEventListener('click', showFavoritesPanel);
    }

    if (closeFavoritesBtn && favoritesOverlay) {
        closeFavoritesBtn.addEventListener('click', closeFavoritesPanel);
        favoritesOverlay.addEventListener('click', (e) => {
            if (e.target === favoritesOverlay) {
                closeFavoritesPanel();
            }
        });
    }

        document.addEventListener('click', function(e) {
        if (e.target.closest('#services-normal')) {
            showServicesDetails();
        }
        
        if (e.target.closest('#services-details button')) {
            hideServicesDetails();
        }
    });
    

});

// –ö–∞—Å—Ç–æ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWA
let deferredPrompt;
const installPrompt = document.getElementById('install-prompt');
const installBtn = document.getElementById('install-btn');
const installClose = document.getElementById('install-close');

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–Ω–æ–ø–∫—É –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
window.addEventListener('beforeinstallprompt', (e) => {
  e.preventDefault();
  deferredPrompt = e;

  setTimeout(() => {
    if (deferredPrompt && !isAppInstalled()) {
      installPrompt.style.display = 'block';
    }
  }, 3000);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
if (installBtn) {
    installBtn.addEventListener('click', async () => {
      if (!deferredPrompt) return;

      deferredPrompt.prompt();
      const { outcome } = await deferredPrompt.userChoice;

      if (outcome === 'accepted') {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        installPrompt.style.display = 'none';
      }


      deferredPrompt = null;
    });
    // –í –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ PWA
window.addEventListener('beforeinstallprompt', (e) => {
    e.preventDefault();
    deferredPrompt = e;

    setTimeout(() => {
        if (deferredPrompt && !isAppInstalled()) {
            const installPrompt = document.getElementById('install-prompt');
            if (installPrompt) {
                installPrompt.style.animation = 'none';
                requestAnimationFrame(() => {
                    installPrompt.style.display = 'block';
                    installPrompt.style.animation = 'slideUpBounce 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
                });
            }
        }
    }, 3000);
});
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
if (installClose) {
    installClose.addEventListener('click', () => {
      installPrompt.style.display = 'none';
      localStorage.setItem('installPromptClosed', 'true');
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
function isAppInstalled() {
  return window.matchMedia('(display-mode: standalone)').matches || 
         window.navigator.standalone ||
         document.referrer.includes('android-app://');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É —Ä–∞–Ω–µ–µ
if (installPrompt && localStorage.getItem('installPromptClosed') === 'true') {
  installPrompt.style.display = 'none';
}

// –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
if (installPrompt && isAppInstalled()) {
  installPrompt.style.display = 'none';
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
const extendedForecastStyles = `
.air-quality-details {
    display: flex;
    flex-direction: column;
    gap: 4px;
    margin-top: 8px;
}

.pollutant-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 3px 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    font-size: 13px;
}

.pollutant-item:last-child {
    border-bottom: none;
}

.pollutant-level {
    font-size: 11px;
    padding: 2px 6px;
    border-radius: 8px;
    font-weight: 600;
}

.level-good { background: #4CAF50; color: white; }
.level-moderate { background: #FFEB3B; color: #333; }
.level-unhealthy-sensitive { background: #FF9800; color: white; }
.level-unhealthy { background: #F44336; color: white; }
.level-very-unhealthy { background: #9C27B0; color: white; }
.level-hazardous { background: #795548; color: white; }

/* –°—Ç–∏–ª–∏ –¥–ª—è –ø–ª–∏—Ç–æ–∫ —Ä–∞—Å—Å–≤–µ—Ç–∞ –∏ –∑–∞–∫–∞—Ç–∞ */
.sun-event-card {
    background: linear-gradient(135deg, rgba(255, 215, 0, 0.2), rgba(255, 140, 0, 0.2)) !important;
    border: 1px solid rgba(255, 215, 0, 0.4) !important;
}

.sun-event-card .sun-mini-icon {
    width: 30px;
    height: 30px;
    border-radius: 50%;
    position: relative;
    margin: 0 auto 8px auto;
}

.sun-event-card .sunrise-icon {
    background: linear-gradient(135deg, #ffd700, #ff8c00);
    box-shadow: 0 0 10px rgba(255, 215, 0, 0.7);
}

.sun-event-card .sunset-icon {
    background: linear-gradient(135deg, #ff6b6b, #ff8c00, #ff4757);
    box-shadow: 0 0 10px rgba(255, 107, 107, 0.7);
}

.sun-event-card .sun-mini-icon::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 20px;
    height: 20px;
    border-radius: 50%;
}

.sun-event-card .sunrise-icon::after {
    background: #ffeb3b;
    box-shadow: 0 0 8px rgba(255, 235, 59, 0.8);
}

.sun-event-card .sunset-icon::after {
    background: #ff7f50;
    box-shadow: 0 0 8px rgba(255, 127, 80, 0.8);
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö */
.history-card {
    background: var(--card-bg) !important;
    border: 1px solid var(--card-border) !important;
    opacity: 0.7;
}

.history-card .hour-time {
    opacity: 0.7;
}

.history-badge {
    position: absolute;
    top: 5px;
    right: 5px;
    background: rgba(128, 128, 128, 0.7);
    color: white;
    font-size: 9px;
    padding: 2px 6px;
    border-radius: 8px;
    font-weight: 600;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - —Ç–∞–∫–æ–π –∂–µ —Ü–≤–µ—Ç –∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö –ø–ª–∏—Ç–æ–∫ */
.current-card {
    background: var(--card-bg) !important;
    border: 2px solid rgba(255, 255, 255, 0.5) !important;
    transform: scale(1.05);
    box-shadow: 0 4px 15px rgba(255, 255, 255, 0.2);
    position: relative;
}

.current-card::before {
    content: '–°–ï–ô–ß–ê–°';
    position: absolute;
    top: -8px;
    left: 50%;
    transform: translateX(-50%);
    background: rgba(255, 255, 255, 0.9);
    color: #333;
    font-size: 10px;
    font-weight: 700;
    padding: 2px 8px;
    border-radius: 10px;
    white-space: nowrap;
    z-index: 2;
}

.current-card .hour-time {
    font-weight: 700;
    color: rgba(255, 255, 255, 0.9);
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ */
.forecast-card {
    background: var(--card-bg) !important;
    border: 1px solid var(--card-border) !important;
}

/* –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ 8 */
.hours-container .hour-card:nth-child(n+9) {
    display: none !important;
}

/* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
@media (max-width: 768px) {
    .sun-event-card .sun-mini-icon {
        width: 25px;
        height: 25px;
    }
    
    .sun-event-card .sun-mini-icon::after {
        width: 16px;
        height: 16px;
    }
    
    .history-badge {
        font-size: 8px;
        padding: 1px 4px;
    }
    
    .current-card::before {
        font-size: 9px;
        padding: 1px 6px;
        top: -6px;
    }
}

@media (max-width: 480px) {
    .sun-event-card .sun-mini-icon {
        width: 22px;
        height: 22px;
    }
    
    .sun-event-card .sun-mini-icon::after {
        width: 14px;
        height: 14px;
    }
    
    .history-badge {
        font-size: 7px;
        padding: 1px 3px;
    }
    
    .current-card::before {
        font-size: 8px;
        padding: 1px 4px;
        top: -5px;
    }
}

/* –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è —á–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ */
.hours-container {
    scroll-behavior: smooth;
    scroll-padding: 0 20px;
}

.hour-card {
    transition: all 0.3s ease;
    position: relative;
}

.hour-card:hover {
    transform: translateY(-2px);
}
`;

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
const styleSheet = document.createElement('style');
styleSheet.textContent = extendedForecastStyles;
document.head.appendChild(styleSheet);


// ========== –°–ï–†–í–ò–°–´ (–í–Ω–µ—à–Ω–∏–µ API) ==========
function showServicesDetails() {
    const normal = document.getElementById('services-normal');
    const details = document.getElementById('services-details');
    if (normal && details) {
        normal.style.display = 'none';
        details.style.display = 'block';
    }
}

function hideServicesDetails() {
    const normal = document.getElementById('services-normal');
    const details = document.getElementById('services-details');
    if (normal && details) {
        normal.style.display = 'block';
        details.style.display = 'none';
    }
}

// ========== –ê–î–ú–ò–ù –†–ï–ñ–ò–ú ==========
let adminMode = false;
let adminLoginTime = null;
let siteEnabled = localStorage.getItem('siteEnabled') !== 'false';

// ========== –°–ò–°–¢–ï–ú–ê –í–´–ö–õ–Æ–ß–ï–ù–ò–Ø –°–ê–ô–¢–ê ==========
function checkSiteStatus() {
    if (!siteEnabled) {
        showSiteDisabledScreen();
        return false;
    }
    return true;
}

function showSiteDisabledScreen() {
    document.body.innerHTML = '';
    document.body.style.cssText = `
        margin: 0;
        padding: 0;
        background: linear-gradient(135deg, #ff6b6b, #ee5a52);
        color: white;
        font-family: 'Segoe UI', sans-serif;
        height: 100vh;
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
    `;
    
    const hour = new Date().getHours();
    let greeting;
    if (hour >= 5 && hour < 12) greeting = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!';
    else if (hour >= 12 && hour < 18) greeting = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!';
    else if (hour >= 18 && hour < 23) greeting = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!';
    else greeting = '–î–æ–±—Ä–æ–π –Ω–æ—á–∏!';

    const container = document.createElement('div');
    container.style.cssText = `
        max-width: 500px;
        padding: 40px;
    `;
    
    container.innerHTML = `
        <div style="font-size: 48px; margin-bottom: 20px;">üîß</div>
        <h1 style="font-size: 32px; margin-bottom: 10px;">Weather Overcast</h1>
        <div style="font-size: 24px; margin-bottom: 10px; opacity: 0.9;">${greeting}</div>
        <div style="font-size: 20px; margin-bottom: 30px;">–°–∞–π—Ç –æ—Ç–∫–ª—é—á–µ–Ω</div>
        <div style="font-size: 18px; margin-bottom: 40px; line-height: 1.5;">
            –°–∞–π—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.<br>
            –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞ –∏ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ–º—Å—è!
        </div>
        <div style="background: rgba(255,255,255,0.1); padding: 20px; border-radius: 10px; font-size: 14px;">
            üíª –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å–æ–ª—å (F12) –∏ –≤–≤–µ–¥–∏—Ç–µ:<br>
            <code style="background: rgba(255,255,255,0.2); padding: 8px 12px; border-radius: 5px; font-size: 16px; margin-top: 10px; display: inline-block;">
                rebot_site()
            </code>
        </div>
    `;
    
    document.body.appendChild(container);
}

// ========== –û–°–ù–û–í–ù–´–ï –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ==========
function admin() {
    if (adminMode) {
        console.log('%c‚ö†Ô∏è –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!', 'color: #FFA500; font-size: 14px;');
        return;
    }
    
    adminMode = true;
    adminLoginTime = new Date();
    
    // –ö—Ä–∞—Å–∏–≤–æ–µ –ª–æ–≥–æ W
    console.log(`%c
    ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
    ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
    ‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
     ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
    `, 'color: #5D8AA8; font-size: 10px;');
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
    const hour = new Date().getHours();
    let greeting;
    
    if (hour >= 5 && hour < 12) {
        greeting = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è';
    } else if (hour >= 12 && hour < 18) {
        greeting = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üå§Ô∏è';
    } else if (hour >= 18 && hour < 23) {
        greeting = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåô';
    } else {
        greeting = '–î–æ–±—Ä–æ–π –Ω–æ—á–∏! üåå';
    }
    
    console.log(`%c${greeting}`, 'color: #87CEEB; font-size: 16px; font-weight: bold;');
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ö–æ–¥–µ
    console.log(`%cüïê –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${adminLoginTime.toLocaleString('ru-RU')}`, 'color: #34C759; font-size: 12px;');
    console.log(`%cüîß –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`, 'color: #FF9500; font-size: 12px;');
    
    // –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    console.log(`%c
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
%cadmin_help()%c - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
%cadmin_time()%c - –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ uptime
%cadmin_stats()%c - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
%cdrop_site()%c - üíÄ –í–´–†–£–ë–ò–¢–¨ —Å–∞–π—Ç –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
%crebot_site()%c - ‚úÖ –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ —Å–∞–π—Ç
%cadmin_theme(theme)%c - –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É (light/dark/dynamic)
%cadmin_notify(message)%c - –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
%cadmin_clear()%c - –û—á–∏—Å—Ç–∏—Ç—å localStorage
%cadmin_exit()%c - –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞
    `.trim(), 
    'color: #FFFFFF; font-size: 12px;',
    'color: #FFD60A;', 'color: #FFFFFF;',
    'color: #FFD60A;', 'color: #FFFFFF;',
    'color: #FFD60A;', 'color: #FFFFFF;',
    'color: #FF453A;', 'color: #FFFFFF;',
    'color: #32D74B;', 'color: #FFFFFF;',
    'color: #FFD60A;', 'color: #FFFFFF;',
    'color: #FFD60A;', 'color: #FFFFFF;',
    'color: #FFD60A;', 'color: #FFFFFF;',
    'color: #FFD60A;', 'color: #FFFFFF;'
    );
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    iosNotifications.success('–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º', '–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 3000);
}

function admin_help() {
    if (!checkAdminMode()) return;
    
    console.log(`%c
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º:

%c–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
%cadmin_help()%c - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
%cadmin_time()%c - –í—Ä–µ–º—è –∏ uptime
%cadmin_stats()%c - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

%c–ì–õ–û–ë–ê–õ–¨–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï (–û–ü–ê–°–ù–û!):
%cdrop_site()%c - üíÄ –í–´–†–£–ë–ò–¢–¨ —Å–∞–π—Ç –Ω–∞ –í–°–ï–• —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
%crebot_site()%c - ‚úÖ –í–û–°–°–¢–ê–ù–û–í–ò–¢–¨ —Å–∞–π—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ  
%csite_status()%c - üåê –°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞

%c–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–æ–π:
%cadmin_theme('light')%c - –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
%cadmin_theme('dark')%c - –¢—ë–º–Ω–∞—è —Ç–µ–º–∞  
%cadmin_theme('dynamic')%c - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞

%c–£—Ç–∏–ª–∏—Ç—ã:
%cadmin_notify('–¢–µ–∫—Å—Ç')%c - –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
%cadmin_clear()%c - –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
%cadmin_exit()%c - –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞
%cforce_refresh()%c - üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
%ctest_connection()%c - üß™ –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

%c–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
%csimulateError()%c - –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏
%cdebugInfo()%c - –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    `.trim(),
    'color: #FFFFFF; font-size: 12px;',
    'color: #FFD60A; font-size: 11px;',
    'color: #32D74B;', 'color: #FFFFFF; font-size: 11px;',
    'color: #32D74B;', 'color: #FFFFFF; font-size: 11px;', 
    'color: #32D74B;', 'color: #FFFFFF; font-size: 11px;',
    'color: #FF453A; font-size: 11px; font-weight: bold;',
    'color: #FF453A;', 'color: #FFFFFF; font-size: 11px;',
    'color: #32D74B;', 'color: #FFFFFF; font-size: 11px;',
    'color: #FFD60A;', 'color: #FFFFFF; font-size: 11px;',
    'color: #FFD60A; font-size: 11px;',
    'color: #FF453A;', 'color: #FFFFFF; font-size: 11px;',
    'color: #FF453A;', 'color: #FFFFFF; font-size: 11px;',
    'color: #FF453A;', 'color: #FFFFFF; font-size: 11px;',
    'color: #FFD60A; font-size: 11px;',
    'color: #0A84FF;', 'color: #FFFFFF; font-size: 11px;',
    'color: #0A84FF;', 'color: #FFFFFF; font-size: 11px;',
    'color: #0A84FF;', 'color: #FFFFFF; font-size: 11px;',
    'color: #0A84FF;', 'color: #FFFFFF; font-size: 11px;',
    'color: #0A84FF;', 'color: #FFFFFF; font-size: 11px;',
    'color: #FFD60A; font-size: 11px;',
    'color: #BF5AF2;', 'color: #FFFFFF; font-size: 11px;',
    'color: #BF5AF2;', 'color: #FFFFFF; font-size: 11px;'
    );
}

function admin_time() {
    if (!checkAdminMode()) return;
    
    const now = new Date();
    const uptime = adminLoginTime ? Math.round((now - adminLoginTime) / 1000) : 0;
    
    console.log(`%c‚è∞ –í—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã:`, 'color: #FFD60A; font-size: 14px;');
    console.log(`%c   –¢–µ–∫—É—â–µ–µ: ${now.toLocaleString('ru-RU')}`, 'color: #FFFFFF;');
    console.log(`%c   Uptime: ${uptime} —Å–µ–∫—É–Ω–¥`, 'color: #32D74B;');
    console.log(`%c   –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω: ${adminLoginTime.toLocaleString('ru-RU')}`, 'color: #0A84FF;');
}

function admin_stats() {
    if (!checkAdminMode()) return;
    
    const favoritesCount = favorites.length;
    const storageUsage = JSON.stringify(localStorage).length;
    const theme = currentTheme;
    const units = currentUnits;
    
    console.log(`%cüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:`, 'color: #FFD60A; font-size: 14px;');
    console.log(`%c   –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –≥–æ—Ä–æ–¥–∞: ${favoritesCount}`, 'color: #32D74B;');
    console.log(`%c   –†–∞–∑–º–µ—Ä localStorage: ${storageUsage} –±–∞–π—Ç`, 'color: #0A84FF;');
    console.log(`%c   –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: ${theme}`, 'color: #FF453A;');
    console.log(`%c   –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è: ${units}`, 'color: #BF5AF2;');
    console.log(`%c   –¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: ${currentCity || '–ù–µ –≤—ã–±—Ä–∞–Ω'}`, 'color: #FF9F0A;');
}

function admin_theme(theme) {
    if (!checkAdminMode()) return;
    
    const validThemes = ['light', 'dark', 'dynamic'];
    if (!validThemes.includes(theme)) {
        console.log(`%c‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ç–µ–º–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${validThemes.join(', ')}`, 'color: #FF453A;');
        return;
    }
    
    updateTheme(theme);
    saveSettings();
    console.log(`%c‚úÖ –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${theme}`, 'color: #32D74B;');
    iosNotifications.success('–ê–¥–º–∏–Ω', `–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${theme}`, 2000);
}

function admin_notify(message = '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞') {
    if (!checkAdminMode()) return;
    
    iosNotifications.info('–ê–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', message, 3000);
    console.log(`%cüì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: "${message}"`, 'color: #0A84FF;');
}

function admin_clear() {
    if (!checkAdminMode()) return;
    
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?')) {
        localStorage.clear();
        location.reload();
    }
}

function admin_exit() {
    if (!adminMode) {
        console.log(`%c‚ö†Ô∏è –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`, 'color: #FFA500;');
        return;
    }
    
    const sessionTime = Math.round((new Date() - adminLoginTime) / 1000);
    adminMode = false;
    adminLoginTime = null;
    
    console.log(`%cüëã –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞`, 'color: #FF453A; font-size: 14px;');
    console.log(`%c   –°–µ—Å—Å–∏—è –¥–ª–∏–ª–∞—Å—å: ${sessionTime} —Å–µ–∫—É–Ω–¥`, 'color: #FFA500;');
    
    iosNotifications.info('–ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º', '–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 2000);
}

// ========== –ì–õ–û–ë–ê–õ–¨–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ê–ô–¢–û–ú ==========
function drop_site() {
    if (!checkAdminMode()) return;
    
    console.log(`%c
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  
    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë         ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù         ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `, 'color: #FF453A; font-size: 8px;');
    
    localStorage.setItem('siteEnabled', 'false');
    localStorage.setItem('siteDisabledTime', new Date().toISOString());
    siteEnabled = false;
    
    console.log(`%cüíÄ –°–ê–ô–¢ –í–´–†–£–ë–õ–ï–ù –ù–ê –í–°–ï–• –£–°–¢–†–û–ô–°–¢–í–ê–•!`, 'color: #FF453A; font-size: 18px; font-weight: bold;');
    console.log(`%c‚è∞ –í—Ä–µ–º—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`, 'color: #FFA500;');
    console.log(`%cüîß –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ: %crebot_site()%c`, 
        'color: #FFFFFF;', 'color: #32D74B; font-weight: bold;', 'color: #FFFFFF;');
    
    setTimeout(() => {
        showSiteDisabledScreen();
    }, 1000);
}

function rebot_site() {
    console.log(`%c
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  
    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù   ‚ñà‚ñà‚ïë       ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïù       ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    `, 'color: #32D74B; font-size: 8px;');
    
    localStorage.setItem('siteEnabled', 'true');
    localStorage.setItem('siteRestoredTime', new Date().toISOString());
    siteEnabled = true;
    
    console.log(`%c‚úÖ –°–ê–ô–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù!`, 'color: #32D74B; font-size: 18px; font-weight: bold;');
    console.log(`%c‚è∞ –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`, 'color: #32D74B;');
    
    const disabledTime = localStorage.getItem('siteDisabledTime');
    if (disabledTime) {
        const downtime = Math.round((new Date() - new Date(disabledTime)) / 1000);
        console.log(`%cüìä –°–∞–π—Ç –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω: ${downtime} —Å–µ–∫—É–Ω–¥`, 'color: #FFD60A;');
    }
    
    console.log(`%cüîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...`, 'color: #0A84FF;');
    setTimeout(() => {
        location.reload();
    }, 2000);
}

function site_status() {
    if (!checkAdminMode()) return;
    
    const enabled = localStorage.getItem('siteEnabled') !== 'false';
    const disabledTime = localStorage.getItem('siteDisabledTime');
    
    console.log(`%cüåê –°—Ç–∞—Ç—É—Å —Å–∞–π—Ç–∞:`, 'color: #FFD60A; font-size: 16px;');
    console.log(`%c   –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${enabled ? '‚úÖ –í–ö–õ–Æ–ß–ï–ù' : '‚ùå –í–´–ö–õ–Æ–ß–ï–ù'}`, 
                `color: ${enabled ? '#32D74B' : '#FF453A'}; font-weight: bold;`);
    
    if (!enabled && disabledTime) {
        const downtime = Math.round((new Date() - new Date(disabledTime)) / 1000);
        console.log(`%c   –û—Ç–∫–ª—é—á–µ–Ω: ${new Date(disabledTime).toLocaleString('ru-RU')}`, 'color: #FFA500;');
        console.log(`%c   –ü—Ä–æ—Å—Ç–æ–π: ${downtime} —Å–µ–∫—É–Ω–¥`, 'color: #FFA500;');
    }
}

// ========== –£–¢–ò–õ–ò–¢–´ –ò –û–¢–õ–ê–î–ö–ê ==========
function force_refresh() {
    if (!checkAdminMode()) return;
    
    console.log(`%cüîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...`, 'color: #0A84FF;');
    
    if ('caches' in window) {
        caches.keys().then(names => {
            names.forEach(name => {
                console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫—ç—à: ${name}`);
                caches.delete(name);
            });
        });
    }
    
    sessionStorage.clear();
    console.log('üóëÔ∏è –û—á–∏—â–µ–Ω sessionStorage');
    
    iosNotifications.info('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', 2000);
    
    setTimeout(() => {
        if (userPlacemark) {
            const coords = userPlacemark.geometry.getCoordinates();
            console.log(`üìç –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${coords[0]}, ${coords[1]}`);
            getWeatherByCoords(coords[0], coords[1]);
        } else if (currentCity) {
            console.log(`üèôÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞: ${currentCity}`);
            getWeatherByCity(currentCity);
        } else {
            console.log('üéØ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏');
            getUserLocation();
        }
    }, 1000);
}

function test_connection() {
    if (!checkAdminMode()) return;
    
    console.log(`%cüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...`, 'color: #FFD60A;');
    
    console.log(`%cüì° Online: ${navigator.onLine}`, 'color: #32D74B;');
    console.log(`%cüåê User Agent: ${navigator.userAgent}`, 'color: #0A84FF;');
    
    const testUrls = [
        'https://api.openweathermap.org/data/2.5/weather?q=London&appid=demo',
        'https://api.openweathermap.org/data/2.5/forecast?q=London&appid=demo'
    ];
    
    testUrls.forEach(url => {
        fetch(url, { method: 'HEAD' })
            .then(response => {
                console.log(`%c‚úÖ ${url} - –î–æ—Å—Ç—É–ø–µ–Ω (${response.status})`, 'color: #32D74B;');
            })
            .catch(error => {
                console.log(`%c‚ùå ${url} - –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`, 'color: #FF453A;');
            });
    });
    
    iosNotifications.info('–¢–µ—Å—Ç —Å–≤—è–∑–∏', '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API', 3000);
}

function simulateError() {
    if (!checkAdminMode()) return;
    
    try {
        throw new Error('–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞ –∏–∑ –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–∞');
    } catch (error) {
        console.error(`%cüîß –ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏:`, 'color: #FF453A;', error);
        iosNotifications.error('–¢–µ—Å—Ç –æ—à–∏–±–∫–∏', '–ò–º–∏—Ç–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞', 3000);
    }
}

function debugInfo() {
    if (!checkAdminMode()) return;
    
    console.log(`%cüêõ –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:`, 'color: #FFD60A; font-size: 14px;');
    console.log(`%c   User Agent: ${navigator.userAgent}`, 'color: #FFFFFF; font-size: 11px;');
    console.log(`%c   Online: ${navigator.onLine}`, 'color: #32D74B;');
    console.log(`%c   Screen: ${screen.width}x${screen.height}`, 'color: #0A84FF;');
    console.log(`%c   Viewport: ${window.innerWidth}x${window.innerHeight}`, 'color: #BF5AF2;');
    console.log(`%c   Cookies: ${navigator.cookieEnabled}`, 'color: #FF9F0A;');
    console.log(`%c   JavaScript: enabled`, 'color: #FF453A;');
}

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
function checkAdminMode() {
    if (!adminMode) {
        console.log(`%c‚ùå –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–≤–µ–¥–∏—Ç–µ %cadmin()%c –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.`, 
            'color: #FF453A;', 'color: #FFD60A;', 'color: #FF453A;');
        return false;
    }
    return true;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
window.addEventListener('error', function(event) {
    if (!adminMode) {
        console.log(`%cüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ %cadmin()%c –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.`, 
            'color: #FF453A;', 'color: #FFD60A;', 'color: #FF453A;');
    }
});